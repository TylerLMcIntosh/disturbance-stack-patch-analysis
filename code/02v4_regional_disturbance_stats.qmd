---
title: "Untitled"
format: html
editor: visual
---

Run spatial statistics on disturbance stack, including summaries and patch statistics

Tyler L. McIntosh CU Boulder CIRES Earth Lab Last updated: 3/20/24

This script uses the following naming conventions wherever possible: lowerCamelCase for variables period.separated for functions underscore_separated for files

# Setup workspace

User-set global parameters Directory management Package management

```{r setup, echo = FALSE, warning = FALSE, message = FALSE}

rm(list=ls()) #Ensure empty workspace if running from beginning

#################################################
#####EVERYTHING HERE SHOULD BE SET MANUALLY######
#################################################

computing <- "local" #Sets computing location and file setup; "cyverse" or "local"
nCores <- 16 #Number of cores available - only necessary if on CyVerse (future package struggles to read automatically on CyVerse, reads 128 (the maximum number of cores)

forestPercCutoff <- 1 #The percentage of forest below which EPA regions will not be retained for calculations
edgeDepth <- 200 #the edge depth to use for all landscapemetrics 'core' caluclations, in meters
resolution <- 30 #of the input rasters, in meters

#################################################

# Directory management ----
require(here)

#Set here location
here::i_am("code/02v4_regional_disturbance_stats.qmd")

#Move data if on cyverse
if(computing == "cyverse") {
  system("cp -R ~/data-store/data/iplant/home/shared/earthlab/macrosystems/disturbance-stack-patch-analysis/data /home/jovyan/data-store/disturbance-stack-patch-analysis/")
}

#Set directories
home <- here::here()

#Raw data
rawDir <- file.path(home, 'data/raw')

#Nathan outputs directory
natOut <- file.path(home, 'data/nathan_outputs')

#Derived data (outdirectory)
devDir <- file.path(home, 'data/derived')
if (!dir.exists(devDir)){
  dir.create(devDir)
}

#Specific derived data directory for this script's outputs
outDir <- file.path(devDir, "summary_stats")
if (!dir.exists(outDir)){
  dir.create(outDir)
}

# Package management ----

source(here::here('code/functions.R'), local = FALSE)

#Check the required libraries and download if needed
packageList <- c(
  "tidyverse", #Includes ggplot2, dplyr, tidyr, readr, purrr, tibble, stringr, forcats
  "terra", #New raster data package, documentation pdf here: https://cran.r-project.org/web/packages/terra/terra.pdf
  "future", "future.apply", "furrr", "doFuture", "progressr", #Futureverse! https://www.futureverse.org/packages-overview.html; https://henrikbengtsson.github.io/course-stanford-futureverse-2023/
  "parallelly", #some useful functions from 'future' were moved to 'parallelly' because they were helpful outside the future framework
  "sf", #New vector data package
  #"mapview", #For quick interactive mapping
  "tictoc", #time running of processes
  "glue", #easy strings
  "tigris", #state polygons
  "ggpmisc"  #For adding R^2 to plots
)

install.and.load.packages(packageList, autoInstall = "y")

#Start parallel computing ----
#Set cores
if(computing == "local") {
  nCores <- future::availableCores() - 1
} else if(computing == "cyverse") {
  cat("Using user-defined number of computing cores:", nCores)
}

future::plan("multisession", workers = nCores)

options(future.globals.onReference = "error")

```

# Load data paths

```{r load-data, echo = FALSE}

#Load data

#Data from Nathan ----

fireInsectsF <- file.path(devDir, "fire_and_insects.tif")


#Individual disturbance stacks
fireStackF <- file.path(devDir, 'fire_dist_stack_west.tif')
insectStackF <- file.path(devDir, 'insect_dist_stack_west.tif')
droughtStackF <- file.path(devDir, 'drought_dist_stack_west.tif')

#Individual disturbance sums
fireSumsF <- file.path(natOut, 'beetle_stack.tif')
beetleSumsF <- file.path(natOut, 'fire_stack.tif')
droughtSumsF <- file.path(natOut, 'drought_stack.tif')

#Individual disturbance 5yr moving windows
beetle5yrF <- list.files(file.path(natOut), pattern = "beetle_totals", full.names = TRUE)
disturbance5yrF <- list.files(file.path(natOut), pattern = "disturbance_totals", full.names = TRUE)
drought5yrF <- list.files(file.path(natOut), pattern = "drought_totals", full.names = TRUE)
fire5yrF <- list.files(file.path(natOut), pattern = "fire_totals", full.names = TRUE)

#Disturbance combination 5yr moving windows
fireDrought5yrF <- list.files(file.path(natOut, "fire-dought"), pattern = "fire_drought_totals", full.names = TRUE)
fireBeetle5yrF <- list.files(file.path(natOut, "fire-beetle"), pattern = "fire_beetle_totals", full.names = TRUE)
droughtBeetle5yrF <- list.files(file.path(natOut, "drought-beetle"), pattern = "bettle_drought_totals", full.names = TRUE)
fireBeetleDrought5yrF <- list.files(file.path(natOut, "all-unique", pattern = "all_unique", full.names = TRUE))

#Additional data
#Load ecoregion & forest data
nameJoin <- readr::read_csv(file.path(devDir, "epal3l4_name_join.csv")) #EPA ecoregion distinct name table for joins (from script 01)
forestL4Stats <- readr::read_csv(file.path(devDir, "forest_l4_dats.csv")) #EPA ecoregion stats on amount of forest (from script 01)
forestL3Stats <- readr::read_csv(file.path(devDir, "forest_l3_dats.csv")) #EPA ecoregion stats on amount of forest (from script 01)
epaL3 <- sf::st_read(file.path(rawDir, "us_eco_l3/us_eco_l3.shp"))
epaL4 <- sf::st_read(file.path(rawDir, "us_eco_l4/us_eco_l4_no_st.shp"))

```

# Set the areas of interest based on EPA ecoregions

This code will only use L3 ecoregions with forest over a certain percentage of the landscape (forestPercCutoff) It will retain and use all L4 ecoregions within the selected L3 ecoregions

```{r}

# #Get the names of regions with enough forest
# l3AboveForestPerc <- forestL3Stats |>
#   dplyr::filter(percForest >= forestPercCutoff) |>
#   dplyr::pull(US_L3NAMECLEAN)
# 
# #EPA level 3 AOI
# aoiL3Interest <- epaL3 |>
#   dplyr::group_by(US_L3NAME) |>
#   dplyr::summarize(geometry = st_union(geometry)) |>
#   dplyr::mutate(US_L3NAMECLEAN = gsub(" ", "", US_L3NAME)) |>
#   dplyr::filter(US_L3NAMECLEAN %in% l3AboveForestPerc)
# 
# #EPA level 4 AOI
# aoiL4Interest <- epaL4 |>
#   dplyr::group_by(US_L4NAME, US_L3NAME) |>
#   dplyr::summarize(geometry = st_union(geometry)) |>
#   dplyr::left_join(nameJoin, join_by(US_L3NAME, US_L4NAME)) |>
#   dplyr::filter(US_L3NAMECLEAN %in% l3AboveForestPerc)


#Two small l4 ecoregions to test script
test <- epaL4 |>
  dplyr::group_by(US_L4NAME, US_L3NAME) |>
  dplyr::summarize(geometry = st_union(geometry)) |>
  dplyr::left_join(nameJoin, join_by(US_L3NAME, US_L4NAME)) |>
  dplyr::filter(US_L4NAME == "Foothill Potholes" | US_L4NAME == "Western Beaverhead Mountains")

test2 <- epaL4 |>
  dplyr::group_by(US_L4NAME, US_L3NAME) |>
  dplyr::summarize(geometry = st_union(geometry)) |>
  dplyr::left_join(nameJoin, join_by(US_L3NAME, US_L4NAME)) |>
  dplyr::filter(US_L3NAME == "Southern Rockies")

test3 <- epaL4 |>
  dplyr::filter(US_L3NAME == "Southern Rockies") |>
  dplyr::left_join(nameJoin, join_by(US_L3NAME, US_L4NAME)) |>
  dplyr::mutate(UNIQUE_ID = row_number())
  
```

# Raster package is slower at clipping (~x2 if using rBrick)


```{r}

# t <- terra::rast(disturbance5yrF[1])
# terra::plot(t)
# r <- raster::raster(disturbance5yrF[1])
# raster::plot(r)
# class(r)
# 
#t <- terra::rast(droughtStackF)
# terra::plot(t)
# r <- raster::stack(droughtStackF)
# raster::plot(r)
# class(r)
# rb <- raster::brick(droughtStackF)
# raster::plot(rb)
# class(rb)
# 
# 
# tic()
# xt <- careful.clip.universal(raster = t, vector = test[1,], mask = TRUE)
# toc()
# 
# tic()
# xr <- careful.clip.universal(raster = r, vector = test[1,], mask = TRUE)
# toc()
# 
# tic()
# xrb <- careful.clip.universal(raster = rb, vector = test[1,], mask = TRUE)
# toc()


```

# Core function: compute stats

This function performs all operations on a given disturbance stack raster set, calling functions sourced from functions.R

```{r}

# Output files will be in outDir, in the form: "setNm_ecoregion_epaLevel_patchstats.csv" and "setNm_ecoregion_epaLevel_summarystats.csv"
# PARAMETERS
# rasterFileName : the name (or names) of files to read into terra::rast()
# aoiSet :  a set of polygons (as an sf object) for which to calculate metrics within.
# setNm : a string, which clarifies what the input raster represents (e.g. "Fire"), and will be used in the output file names.

calculate.metrics.for.raster.aoi.set <- function(rasterFileName, aoiSet, setNm) { 
  #Do not allow set names with underscores or spaces
  if(grepl("_", setNm) | grepl(" ", setNm) ) {
    stop("'setNm' cannot contain underscores or spaces")
  }
  
  #Prep raster for parallel processing
  spatRast <- terra::rast(rasterFileName)
  rWrap <- terra::wrap(spatRast, proxy = TRUE)
  rm(spatRast) #remove global variable that is unserializable
  

  #Prep vectors for parallel processing: Split vectors into a wrapped list of spatVectors
  if("US_L4L3NAMECLEAN" %in% names(aoiSet)) {
    namefield <- "US_L4L3NAMECLEAN"
    epaLvl <- "epaL4"
  } else {
    namefield <- "US_L3NAMECLEAN"
    epaLvl <- "epaL3"
  }
  
  
  splitVec <- aoiSet |>
    #sf.to.polygon.list(namefield = namefield) #from functions.R
    sf.to.polygon.list(namefield = "US_L4L3NAMECLEAN") #from functions.R

  vs <- splitVec |> 
    purrr::map(terra::vect) |> 
    purrr::map(terra::wrap)
  
  #Run calculate raster metrics function in parallel
  print('Starting parallel processing')
  allDats <- vs |> furrr::future_map(~calculate.raster.metrics(rWrap = rWrap, aoi = .x, setNm = setNm), .options = furrr_options(seed = TRUE))
  
  # #Add dataset grouping names to outputs
  # allDats <- purrr::map2(.x = allDats, .y = names(allDats), .f = ~add.data.aoi.nms(datSet = .x, aoiNm = .y, setNm = setNm, epaLevel = epaLvl))
  # 
  # # Extract and bind together freqs and metrics dataframes
  # allFreqs <- allDats |> 
  #   purrr::map(~ .x$freqs) |>  # Extract 'freqs' from each sublist
  #   bind_rows()       # Combine all 'freqs' dataframes
  # allMetrics <- allDats |> 
  #   purrr::map(~ .x$metrics) |>  # Extract 'metrics' from each sublist
  #   bind_rows()       # Combine all 'metrics' dataframes
  # 
  # #Return
  # out <- list(allFreqs, allMetrics)
  # names(out) <- c("freqs", "metrics")
  # return(out)
  # 
}

#A function to add aoi and data set names to the output tables
add.data.aoi.nms <- function(datSet, aoiNm, setNm, epaLevel) {
  out <- purrr::map(.x = datSet, .f = ~dplyr::mutate(.data = .x,
                                                     dataNm = setNm,
                                                     aoiNm = aoiNm,
                                                     epaLevel = epaLevel))
  
  return(out)
}

#This function is meant to be run in parallel with a wrapped raster in rWrap
calculate.raster.metrics <- function(rWrap, aoi, setNm) {
  
  unwrappedAoi <- terra::unwrap(aoi)
  
  #Clip the raster to the aoi sent to node ---- COMMENT ADAPTED TO TEST RASTER PACKAGE INSTEAD
  unWrapR <- terra::unwrap(rWrap)
  
  rProcess <- raster::brick(unWrapR)
  clippedR <- careful.clip(raster = rProcess, vector = unwrappedAoi, mask = TRUE)

  #clippedR <- careful.clip(raster = unWrapR, vector = unwrappedAoi, mask = TRUE)
  clippedR <- terra::rast(clippedR)
  
  #Collect frequencies 
  freqs <- clippedR |> terra::freq(bylayer = TRUE, usenames = TRUE, wide = TRUE)
  
  #Calculate patch metrics
  metrics <- clippedR |>
    calculate.lsm.with.names( #from functions.R, adds raster layer names as well
      #full_name = TRUE, #NOTE: for some reason cyverse in parallel won't do full_names = TRUE in the function call, so have to do manually
      directions = 8,
      edge_depth = edgeDepth %/% resolution, #edge depth in pixels, without remainder
      what = c(
        'lsm_c_ai',
        'lsm_p_area',
        'lsm_p_cai',
        'lsm_p_core',
        'lsm_p_enn',
        'lsm_p_para',
        'lsm_p_shape',
        'lsm_p_contig',
        'lsm_p_circle'
      )
    ) |>
    dplyr::left_join(landscapemetrics::lsm_abbreviations_names) #NOTE: for some reason cyverse in parallel won't do full_names = TRUE in the function call, so have to do manually
  
  #Return data and node ID
  cat("Data coming back from node: ", Sys.getpid(), "\n")
  cat(setNm, unique(unwrappedAoi$US_L4NAME))
  
  write.csv(freqs, file.path(outDir, glue::glue("freqs_{unique(unwrappedAoi$US_L4L3NAMECLEAN)}_{setNm}.csv")))
  write.csv(metrics, file.path(outDir, glue::glue("metrics_{unique(unwrappedAoi$US_L4L3NAMECLEAN)}_{setNm}.csv")))


  rm(freqs, metrics, clippedR, unwrappedAoi)
  gc()
  
  # outputs <- list(freqs, metrics)
  # names(outputs) <- c("freqs", "metrics")
  # 
  # return(outputs)
  
}




# calculate.metrics.for.raster.aoi.set <- function(rasterFileName, aoiSet, setNm) {
#   #Do not allow set names with underscores or spaces
#   if(grepl("_", setNm) | grepl(" ", setNm) ) {
#     stop("'setNm' cannot contain underscores or spaces")
#   }
#   
#   spatRast <- terra::rast(rasterFileName)
#   
#   clippedRasterList <- careful.clip.set(raster = spatRast, vectors = aoiSet, namefield = "US_L4L3NAMECLEAN", mask = TRUE)
#   
#   return(clippedRasterList)
# }
# 
# calculate.metrics.for.raster.aoi.set2 <- function(rasterFileName, aoiSet, setNm) {
#   #Do not allow set names with underscores or spaces
#   if(grepl("_", setNm) | grepl(" ", setNm) ) {
#     stop("'setNm' cannot contain underscores or spaces")
#   }
#   
#   clippedRasterList <- careful.clip.set2(raster = rasterFileName, vectors = aoiSet, namefield = "US_L4L3NAMECLEAN", mask = TRUE)
#   
#   return(clippedRasterList)
# }

```

# Run functions

```{r}

tic("One-layer raster, parallel")
testOut <- calculate.metrics.for.raster.aoi.set(rasterFileName = disturbance5yrF, aoiSet = test2, setNm = "testRaster")
toc()
# #9 sec test1 beetleSumsF terra
# #42 sec test1 beetleSumsF raster
# #50 sec test2 single
# #26 sec test1 multilayer --- 87 sec test1 multilayer by-layer terra (assume this is from cluster overhead)
  # 164 sec test1 multilayer raster package, disturbance5yrF
# #crashes on test2 multilayer CyV
# #test2 local - uses all local memory but continues processing, 544 seconds, success
# 


tic()
purrr::map(.x = disturbance5yrF, .f = calculate.metrics.for.raster.aoi.set, aoiSet = test2, setNm = "testByLayer")
toc()

tic()
testOut <- calculate.metrics.for.raster.aoi.set(rasterFileName = disturbance5yrF[1:2], aoiSet = test, setNm = "test_by_layer")
toc()

tic()
freqs <- terra::rast(disturbance5yrF) |> terra::freq(bylayer = TRUE, usenames = TRUE, zones = terra::vect(test2), wide = TRUE)
toc()

```
